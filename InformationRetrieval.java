package edu.asu.cse494;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;

import com.lucene.index.IndexReader;

/**
 *
 * @author rbayapu
 */
public class InformationRetrieval extends javax.swing.JFrame {

	Vector vector=new Vector();
	
    /** Creates new form InformationRetrieval */
    public InformationRetrieval() {
        initComponents();
        vector.showVector();
        
        System.out.println("Search engine is ready to query now");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inputtext = new javax.swing.JTextField();
        searchbutton = new javax.swing.JButton();
        querytype = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        weighttext = new javax.swing.JTextField();
        message = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultarea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Goo...Search", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Pristina", 1, 36), new java.awt.Color(97, 54, 54))); // NOI18N
        jPanel1.setToolTipText("Goo");
        jPanel1.setName("Go...Search"); // NOI18N

        searchbutton.setText("Search");
        searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttonActionPerformed(evt);
            }
        });

        querytype.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        querytype.setForeground(new java.awt.Color(112, 72, 52));
        querytype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TF", "TF-IDF", "Authority-Hubs", "Page Rank" }));

        jLabel1.setFont(new java.awt.Font("SWSimp", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 0));
        jLabel1.setText("Weight:");

        weighttext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weighttextActionPerformed(evt);
            }
        });

        message.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 15)); // NOI18N
        message.setForeground(new java.awt.Color(0, 51, 51));
        message.setText("Search queries... make your life easy");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(message, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(querytype, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(weighttext, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                    .addComponent(inputtext, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(searchbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchbutton)
                    .addComponent(inputtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(querytype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(weighttext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(message)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        resultarea.setColumns(20);
        resultarea.setRows(5);
        jScrollPane1.setViewportView(resultarea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>
    
    
    
/******************************Handling button event over here***************************************************/
    private void searchbuttonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String query = inputtext.getText();
        String weight = weighttext.getText();
        String querytype1 = (String) querytype.getSelectedItem();
        String empty = "";
        
       
        if(query==null || empty.equals(query))
        {
        	resultarea.setText("No Query keyword entered!");
        }
        else
        {
        	resultarea.setText("\""+query+"\" results are:\n");
	        if(querytype1=="TF")
	        {
	        	IndexReader reader;
				try {
						reader = IndexReader.open("result3index");
					
		        	 Map<Integer, Double>cosMat = new HashMap<Integer, Double>();
		        	 long start = System.currentTimeMillis();
		        	cosMat=vector.searchQuery(query);
		        	resultarea.append(cosMat.size()+" Total matching documents shown in:" +(System.currentTimeMillis()-start)/1000F+"seconds\n\n");
		        	Iterator res = cosMat.entrySet().iterator();
		        	int count=0,val=0;
		        	  while (res.hasNext()) // iterating through all the indexes
	  		        {
		        		  count++; val++;
	  		    	Map.Entry pair = (Map.Entry)res.next();
	  		    	 	System.out.println(val+") "+reader.document(Integer.parseInt(pair.getKey().toString())).get("url")+ " : Document no: "+pair.getKey()+" : similarity: "+ pair.getValue());
	  		    	 	String result=reader.document(Integer.parseInt(pair.getKey().toString())).get("url")+ " : Document no: "+pair.getKey()+" : similarity: "+ pair.getValue();
	  		    	 	resultarea.append(val+") "+result+"\n");
	  		    	 	if(count>=10)
    		    		{
	  		    	 		break;
	  		    	 		/*
    		    		count=0;
    		    		System.out.println("More?(Y/N)");
    		    		BufferedReader out = new BufferedReader(new InputStreamReader(System.in));
    		    		String ch = out.readLine().toLowerCase();
    		    		if(ch.charAt(0)=='n')
    		    			{
    		    			 break;
    		    			}
    		    		*/
    		    		}
	  		    	 	
  		        }
				} catch (IOException e) {
										e.printStackTrace();
				}
	        	//resultarea.setText("TF selected");
	        }
	        if(querytype1=="TF-IDF")
	        {
	        	IndexReader reader;
				try {
						reader = IndexReader.open("result3index");
				
	  		    	 	VectorVwr vec = new VectorVwr();
			        	vec.showVector(query);
			        	ArrayList<Integer> tfidf = new ArrayList<Integer>();
			        	ArrayList<Double> tfidfsim = new ArrayList<Double>();
			        	tfidf = vec.tfidfDocs();
			        	tfidfsim = vec.tfidfSimilarity();
			        	
			        	
			        		for(int i=0;i<tfidf.size();i++)
			        		{
			        			String result=i+1+")  Document no: "+tfidf.get(i)+" | "+reader.document(Integer.parseInt(tfidf.get(i).toString())).get("url")+ " | similarity: "+ tfidfsim.get(i);
			        			resultarea.append(result+"\n");
			        		}
  		        
				} catch (IOException e) {
										e.printStackTrace();
				}
	        	
	        }
	        if(querytype1=="Authority-Hubs")
	        {
	        	
	        	IndexReader reader;
				try {
						reader = IndexReader.open("result3index");
					
		        	 Map<Integer, Double>cosMat = new HashMap<Integer, Double>();
		        	 long start = System.currentTimeMillis();
		        	cosMat=vector.searchTfidfQuery(query);
		        	Iterator res = cosMat.entrySet().iterator();
		        	int count=0,val=0;
		        	
		        	LinkedList<Integer> l = new LinkedList<Integer>();
		        	
		        	VectorVwr vec = new VectorVwr();
		        	vec.showVector(query);
		        	ArrayList<Integer> tfidf = new ArrayList<Integer>();
		        	ArrayList<Double> tfidfsim = new ArrayList<Double>();
		        	tfidf = vec.tfidfDocs();
		        	tfidfsim = vec.tfidfSimilarity();
		        	
	        	  int[] authdoc= new int[tfidf.size()];
	        	  for(int i=0;i<tfidf.size();i++)
	        	  {
	        		  authdoc[i]=(int) tfidf.get(i);
	        	  }
		        	  
		        	 /*******Getting Authority values and displaying in GUI****************/
		        	  AuthHubs authority = new AuthHubs();
		        	  authority.Authority(authdoc);
		        	  cosMat=authority.getAutorityRank();
		        	  res = cosMat.entrySet().iterator();
		        	  resultarea.append(cosMat.size()+" Total matching documents shown in:" +(System.currentTimeMillis()-start)/1000F+"seconds\n\n");
			        	count=0;val=0;
			        	resultarea.append("TOP 10 AUTHORITY RANKED DOCUMENTS:\n");
		        	  while (res.hasNext()) // iterating through all the indexes
		  		        {
		        		  Map.Entry pair = (Map.Entry)res.next();
		        		  String result="  Document no: "+pair.getKey()+" | Link: "+reader.document(Integer.parseInt(pair.getKey().toString())).get("url")+ "  |  similarity: "+ pair.getValue();
		  		    	  resultarea.append(val+1+") "+result+"\n");
		        		  count++; val++;
		        		  if(count>=10)
	    		    		{
		  		    	 		break;
		  		    	 	
	    		    		}
		  		        }
		        	  /*****Getting HubValue and displaying in the GUI******************/
		        	  cosMat=authority.getHubRank();
		        	  res = cosMat.entrySet().iterator();
		        	  resultarea.append(cosMat.size()+" Total matching documents shown in:" +(System.currentTimeMillis()-start)/1000F+"seconds\n\n");
			        	count=0;val=0;
			        	resultarea.append("TOP 10 HUB RANKED DOCUMENTS\n");
		        	  while (res.hasNext()) // iterating through all the indexes
		  		        {
		        		  Map.Entry pair = (Map.Entry)res.next();
		        		  String result="  Document no: "+pair.getKey()+" | Link: "+reader.document(Integer.parseInt(pair.getKey().toString())).get("url")+ "  |  similarity: "+ pair.getValue();
			  		     resultarea.append(val+1+") "+result+"\n");
		        		  count++; val++;
		        		  if(count>=10)
	    		    		{
		  		    	 		break;
		  		    	 	
	    		    		}
		  		        }
		        	  
		        	  
				} catch (IOException e) {
										e.printStackTrace();
				}
	        }
	        if(querytype1=="Page Rank")
	        {
	        	IndexReader reader;
	        	try {
					reader = IndexReader.open("result3index");
				
			        	double weight1;
			        	if(weight==null || empty.equals(weight))
			        	{
			        		resultarea.setText("Default weight of 0.4 is considered for calculating page vector rank\n");
			        		weight1 =0.4;
			        	}
			        	else
			        	{
			        		weight1=Double.parseDouble(weight);
			        	}
			        	resultarea.setText("Vector space Page Rank values for query:"+query+"\n\n");
			        	
			        	PageRankProb prob = new PageRankProb();
			        	float dampingfactor = (float) 0.85;
			        	prob.pagerank(dampingfactor);
			        	VectorVwr vec = new VectorVwr();
			        	vec.showVector(query);
			        	ArrayList<Integer> tfidf = new ArrayList<Integer>();
			        	tfidf = vec.tfidfDocs();
			        	
			        	ArrayList<Double> tfidfsim = new ArrayList<Double>();
			        	tfidfsim = vec.tfidfSimilarity();
			        	
			        	int[] testset = new int[tfidf.size()];
			        	Double[] testsetsim = new Double[tfidf.size()];
			        		for(int i=0;i<tfidf.size();i++)
			        		{
			        			testset[i]=tfidf.get(i);
			        			testsetsim[i]=tfidfsim.get(i);
			        			//resultarea.append(testset[i]+"\n");
			        		}
			        		 Map<Integer, Double> cosMat = new HashMap<Integer, Double>();
			        		 cosMat = prob.pageRankVectorSpace(testset,testsetsim,weight1);
			        		
				        	 long start = System.currentTimeMillis();
				        	
				        	Iterator res = cosMat.entrySet().iterator();
				        	int count=0,val=0;
				        	  while (res.hasNext()) // iterating through all the indexes
			  		        {
				        	  		  count++; val++;
			  		    	Map.Entry pair = (Map.Entry)res.next();
			  		    	String result="  Document no: "+pair.getKey()+" | Link: "+reader.document(Integer.parseInt(pair.getKey().toString())).get("url")+ "  |  similarity: "+ pair.getValue();
		  		    	 	
			  		    	resultarea.append(count+") "+result+"\n");
			  		 }
	        	} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	  		    
	        	
	        }
        }

    }

    
    
    
    private void weighttextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformationRetrieval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField inputtext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel message;
    private javax.swing.JComboBox querytype;
    private javax.swing.JTextArea resultarea;
    private javax.swing.JButton searchbutton;
    private javax.swing.JTextField weighttext;
    // End of variables declaration

}
